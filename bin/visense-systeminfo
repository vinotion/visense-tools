#!/usr/bin/env node

'use strict';

const version = require('../package.json').version;

const program        = require('commander'),
      Authentication = require('../lib/authentication'),
      ViSenseSystem  = require('../lib/visense-system');


// Define command-line arguments.
program
  .version(version)
  .option('--ip <ip>', 'IP-address')
  .option('--port <port>', 'Port number (default: 443)', '443')
  .option('--username <username>', 'Username')
  .option('--password <password>', 'Password')
  .option('--no-ssl', 'Disable usage of SSL; i.e. assume plain HTTP')
  .parse(process.argv);


function checkCommandLineArguments(program) {
  if (  (typeof program.ip === 'undefined')
     || (typeof program.username === 'undefined')
     || (typeof program.password === 'undefined')) {
    program.outputHelp();
    throw new Error('Missing command-line argument(s).');
  }
}


function handleError(error) {
  console.error('Error: ' + error.message);
  process.exit(1);
}


// Script entry point.
try {
  checkCommandLineArguments(program);

  const socketAddress = { ip: program.ip, port: Number(program.port) };

  let authentication = Authentication(socketAddress, program.ssl);

  authentication.signIn({ username: program.username, password: program.password }).then(() => {
      let system = ViSenseSystem(socketAddress, program.ssl, authentication.getSessionToken());

      return Promise.all([ system.getProductName(),
                           system.getServiceTag(),
                           system.getConnectionStatus() ]).then((results) => {
          console.log('ViSense system information:');
          console.log('---------------------------');
          console.log('ID                : ' + system.getId());
          console.log('Product name      : ' + results[0]);
          console.log('Service tag       : ' + results[1]);
          console.log('Connection status : ' + results[2]);
        }, handleError).then(authentication.signOut);
    }, handleError).catch(handleError);
} catch (error) {
  handleError(error);
}
