#!/usr/bin/env node

'use strict';

const version = require('../package.json').version;

const program        = require('commander'),
      Authentication = require('../lib/authentication.js');


// Define command-line arguments.
program
  .version(version)
  .option('--ip <ip>', 'IP-address')
  .option('--port <port>', 'Port number (default: 443)', '443')
  .option('--command <SignIn|SignOut>', 'Authentication command to be executed.')
  .option('--username <username>', 'Username (mandatory for command SignIn)')
  .option('--password <password>', 'Password (mandatory for command SignIn)')
  .option('--sessionToken <sessionToken>', 'Session token (mandatory for command SignOut)')
  .option('--no-ssl', 'Disable usage of SSL; i.e. assume plain HTTP')
  .parse(process.argv);


function checkCommandLineArguments(program) {
  if (  (typeof program.ip === 'undefined')
     || (typeof program.command === 'undefined')) {
    program.outputHelp();
    throw new Error('Missing command-line argument(s).');
  }

  if (!/^(SignIn|SignOut)$/.test(program.command)) {
    program.outputHelp();
    throw new Error('Invalid command provided.');
  }

  if (  (program.command === 'SignIn')
     && (  (typeof program.username === 'undefined')
        || (typeof program.password === 'undefined'))) {
    program.outputHelp();
    throw new Error('Command-line arguments \'username\' and \'password\' mandatory for command SignIn.');
  }

  if (  (program.command === 'SignOut')
     && (typeof program.sessionToken === 'undefined')) {
    program.outputHelp();
    throw new Error('Command-line argument \'sessionToken\' mandatory for command SignOut.');
  }
}


function handleError(error) {
  console.error('Error: ' + error.message);
  process.exit(1);
}


// Script entry point.
try {
  checkCommandLineArguments(program);

  let authentication = Authentication({ ip: program.ip, port: Number(program.port) }, program.ssl);

  // Process authentication command
  switch (program.command) {
  case 'SignIn':
    authentication.signIn({ username: program.username, password: program.password }).then(() => {
        console.log(authentication.getSessionToken());
      }, (error) => {
        handleError(error);
      });
    break;

  case 'SignOut':
    authentication.setSessionToken(program.sessionToken);
    authentication.signOut().then(null, (error) => {
        handleError(error);
      });
    break;
  }
} catch (error) {
  handleError(error);
}
